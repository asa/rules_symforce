module(
    name = "rules_symforce",
    version = "0.0.1",
    compatibility_level = 1,
)

# Basic dependencies
bazel_dep(name = "bazel_skylib", version = "1.7.1")
bazel_dep(name = "platforms", version = "0.0.11")
bazel_dep(name = "rules_cc", version = "0.1.1")
bazel_dep(name = "rules_python", version = "1.3.0")
bazel_dep(name = "eigen", version = "3.4.0")
bazel_dep(name = "fmt", version = "8.1.1")
bazel_dep(name = "spdlog", version = "1.10.0")
bazel_dep(name = "immer", version = "0.8.2")
bazel_dep(name = "lager", version = "0.1.2")

# SymEngine dependencies
bazel_dep(name = "symforce_repo", version = "480127")
bazel_dep(name = "symengine_repo", version = "9eb14a")
bazel_dep(name = "gmp", version = "6.3.0")
bazel_dep(name = "symenginepy", version = "762f83")
bazel_dep(name = "cython_repo", version = "34282c")

# Third-party modules
bazel_dep(name = "catch2", version = "3.7.1")
bazel_dep(name = "catch1", version = "908c37")
bazel_dep(name = "metis", version = "5.1.0")

python = use_extension("@rules_python//python/extensions:python.bzl", "python")
local_path_override(
    module_name = "rules_python",
    path = "../rules_python",
)

python.toolchain(
    configure_coverage_tool = True,
    is_default = True,
    python_version = "3.12",
)

# You only need to load this repositories if you are using multiple Python versions.
# See the tests folder for various examples on using multiple Python versions.
# The names "python_3_9" and "python_3_10" are autmatically created by the repo
# rules based on the `python_version` arg values.
use_repo(python, "python_3_12", "python_versions", "pythons_hub")

# EXPERIMENTAL: This is experimental and may be removed without notice
uv = use_extension(
    "@rules_python//python/uv:uv.bzl",
    "uv",
    # Use `dev_dependency` so that the toolchains are not defined pulled when
#    # your module is used elsewhere.
    dev_dependency = True,
)

uv.configure(version = "0.6.2")
use_repo(uv, "uv")
#register_toolchains("@uv//:all")

pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip")

pip.parse(
    # We can use `envsubst in the above
    envsubst = ["PIP_INDEX_URL"],
    # Use the bazel downloader to query the simple API for downloading the sources
    # Note, that we can use envsubst for this value.
    experimental_index_url = "${PIP_INDEX_URL:-https://pypi.org/simple}",
    hub_name = "rspypi",
    python_version = "3.12",
    requirements_lock = "//:requirements.txt",
)

use_repo(pip, "rspypi")
