package(default_visibility = ["//visibility:public"])

load("@rules_symforce//symengine_tools:version.bzl", "symengine_config", "teuchos_config")

symengine_config(
     name="config",
     template = "symengine/symengine_config.h.in",
     output = "symengine/symengine_config.h",
)

filegroup(
    name="config_template",
    srcs = ["symengine/symengine_config.h.in"],
)

COPTS = ["-D_hypot=hypot", 
        "-Doff64_t=_off64_t"]

cc_library(
        name = "symengine_src",
        hdrs = ["symengine/add.h",
"symengine/basic.h",
"symengine/basic-inl.h",
"symengine/basic-methods.inc",
"symengine/complex_double.h",
"symengine/complex.h",
"symengine/complex_mpc.h",
"symengine/constants.h",
"symengine/cwrapper.h",
"symengine/data_buffer_element.h",
"symengine/derivative.h",
"symengine/dict.h",
"symengine/diophantine.h",
"symengine/eval_arb.h",
"symengine/eval_double.h",
"symengine/eval.h",
"symengine/eval_mpc.h",
"symengine/eval_mpfr.h",
"symengine/expression.h",
"symengine/fields.h",
"symengine/finitediff.h",
"symengine/flint_wrapper.h",
"symengine/functions.h",
"symengine/infinity.h",
"symengine/integer.h",
"symengine/lambda_double.h",
"symengine/llvm_double.h",
"symengine/logic.h",
"symengine/matrix.h",
"symengine/monomials.h",
"symengine/mp_class.h",
"symengine/mp_wrapper.h",
"symengine/mul.h",
"symengine/nan.h",
"symengine/ntheory.h",
"symengine/number.h",
"symengine/parser.h",
"symengine/parser/parser.h",
"symengine/parser/parser.tab.hh",
"symengine/parser/parser_stype.h",
"symengine/parser/tokenizer.h",
"symengine/polys/basic_conversions.h",
"symengine/polys/cancel.h",
"symengine/polys/uexprpoly.h",
"symengine/polys/uintpoly_flint.h",
"symengine/polys/uintpoly.h",
"symengine/polys/uintpoly_piranha.h",
"symengine/polys/upolybase.h",
"symengine/polys/uratpoly.h",
"symengine/polys/usymenginepoly.h",
"symengine/polys/msymenginepoly.h",
"symengine/pow.h",
"symengine/printers/codegen.h",
"symengine/printers/mathml.h",
"symengine/printers/strprinter.h",
"symengine/printers/latex.h",
"symengine/printers.h",
"symengine/rational.h",
"symengine/real_double.h",
"symengine/real_mpfr.h",
"symengine/rings.h",
"symengine/series_flint.h",
"symengine/series_generic.h",
"symengine/series.h",
"symengine/series_piranha.h",
"symengine/series_visitor.h",
"symengine/sets.h",
"symengine/solve.h",
"symengine/subs.h",
"symengine/symbol.h",
"symengine/symengine_assert.h",
"symengine/symengine_casts.h",
"symengine/symengine_exception.h",
"symengine/symengine_rcp.h",
"symengine/type_codes.inc",
"symengine/visitor.h",
"symengine/test_visitors.h"],
        srcs = [
"symengine/add.cpp",
"symengine/basic.cpp",
"symengine/complex.cpp",
"symengine/complex_double.cpp",
"symengine/constants.cpp",
"symengine/cse.cpp",
"symengine/cwrapper.cpp",
"symengine/data_buffer_element.cpp",
"symengine/dense_matrix.cpp",
"symengine/derivative.cpp",
"symengine/dict.cpp",
"symengine/diophantine.cpp",
"symengine/eval.cpp",
"symengine/eval_double.cpp",
"symengine/expand.cpp",
"symengine/expression.cpp",
"symengine/fields.cpp",
"symengine/finitediff.cpp",
"symengine/functions.cpp",
"symengine/infinity.cpp",
"symengine/integer.cpp",
"symengine/logic.cpp",
"symengine/matrix.cpp",
"symengine/monomials.cpp",
"symengine/mul.cpp",
"symengine/nan.cpp",
"symengine/ntheory.cpp",
"symengine/number.cpp",
"symengine/numer_denom.cpp",
"symengine/parser/parser_old.cpp",
"symengine/parser/parser.tab.cc",
"symengine/parser/parser.cpp",
"symengine/parser/tokenizer.cpp",
"symengine/polys/basic_conversions.cpp",
"symengine/polys/msymenginepoly.cpp",
"symengine/polys/uexprpoly.cpp",
"symengine/polys/uintpoly.cpp",
"symengine/polys/uratpoly.cpp",
"symengine/pow.cpp",
"symengine/printers/codegen.cpp",
"symengine/printers/mathml.cpp",
"symengine/printers/strprinter.cpp",
"symengine/printers/latex.cpp",
"symengine/rational.cpp",
"symengine/real_double.cpp",
"symengine/rewrite.cpp",
"symengine/rings.cpp",
"symengine/series.cpp",
"symengine/series_generic.cpp",
"symengine/sets.cpp",
"symengine/solve.cpp",
"symengine/sparse_matrix.cpp",
"symengine/symbol.cpp",
"symengine/symengine_rcp.cpp",
"symengine/visitor.cpp",
"symengine/test_visitors.cpp",
        ]
        +["symengine/symengine_config.h"],
    includes = [".","symengine"],
)

cc_library(
    name = "symengine",
    srcs = glob([
        "symengine/**/*.h",
        "symengine/**/*.hpp",
        "symengine/**/*.cpp",
    ], exclude = ["**/tests/**/*"]) + [
        "symengine/symengine_config.h",
    ],
    includes = ["."],
    deps=[
    ],
    copts=[],
)


#teuchos_config(
#     name="teuchos_config",
#     template = "symengine/utilities/teuchos/Teuchos_config.h.in",
#     output = "symengine/utilities/teuchos/Teuchos_config.h",
#)

#filegroup(
#    name="teuchos_config_template",
#    srcs = ["symengine/utilities/teuchos/Teuchos_config.h.in"],
#)
#cc_library(
#    name = "teuchos",
#    hdrs = ["symengine/utilities/teuchos/Teuchos_any.hpp",
#    "symengine/utilities/teuchos/Teuchos_Assert.hpp",
#    "symengine/utilities/teuchos/Teuchos_ConfigDefs.hpp",
#    "symengine/utilities/teuchos/Teuchos_ConstTypeTraits.hpp",
#    "symengine/utilities/teuchos/Teuchos_DLLExportMacro.h",
#    "symengine/utilities/teuchos/Teuchos_dyn_cast.hpp",
#    "symengine/utilities/teuchos/Teuchos_ENull.hpp",
#    "symengine/utilities/teuchos/Teuchos_Exceptions.hpp",
#    "symengine/utilities/teuchos/Teuchos_getBaseObjVoidPtr.hpp",
#    "symengine/utilities/teuchos/Teuchos_map.hpp",
#    "symengine/utilities/teuchos/Teuchos_NullIteratorTraits.hpp",
#    "symengine/utilities/teuchos/Teuchos_Ptr.hpp",
#    "symengine/utilities/teuchos/Teuchos_PtrDecl.hpp",
#    "symengine/utilities/teuchos/Teuchos_RCP.hpp",
#    "symengine/utilities/teuchos/Teuchos_RCPDecl.hpp",
#    "symengine/utilities/teuchos/Teuchos_RCPNode.hpp",
#    "symengine/utilities/teuchos/Teuchos_stacktrace.hpp",
#    "symengine/utilities/teuchos/Teuchos_TestForException.hpp",
#    "symengine/utilities/teuchos/Teuchos_toString.hpp",
#    "symengine/utilities/teuchos/Teuchos_TypeNameTraits.hpp",
#    "symengine/utilities/teuchos/Teuchos_config.h",
#    ],
#    srcs = [
#        "symengine/utilities/teuchos/Teuchos_dyn_cast.cpp",
#        "symengine/utilities/teuchos/Teuchos_Ptr.cpp",
#        "symengine/utilities/teuchos/Teuchos_RCPNode.cpp",
#        "symengine/utilities/teuchos/Teuchos_TestForException.cpp",
#        "symengine/utilities/teuchos/Teuchos_TypeNameTraits.cpp",
#        "symengine/utilities/teuchos/Teuchos_stacktrace.cpp"],
#    includes = ["symengine/utilities/teuchos"],
#    copts = ["-Wno-unused-but-set-variable"]
#)

#symengine/symengine/utilities/teuchos/
# benchmarks
